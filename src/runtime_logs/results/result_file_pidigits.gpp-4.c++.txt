{
    "0": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\npublic:\n    LFT() : q(1), r(0), t(1), k(0){};\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t = (2 * k + 1) * t;\n        q = q * k;\n    }\n\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1;\n        tmp0 = q * x + r;\n        tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q = 10 * q;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n\n    LFT lft;\n    std::size_t n_digits = 0;\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        while (i < 10 and n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q > lft.r) continue;\n\n            auto digit = lft.extract(3);\n            if (digit == lft.extract(4)) {\n                std::cout << digit;\n                lft.produce(digit);\n                ++i;\n                ++n_digits;\n            }\n        }\n\n        // Pad digits with extra spaces if TOTAL_DIGITS was not a\n        // multiple of 10.\n        for (; i < 10; ++i) std::cout << ' ';\n        std::cout << \"\\t:\" << n_digits << '\\n';\n    }\n}",
        196.166,
        1189.636
    ],
    "1": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\npublic:\n    LFT() : q(1), r(0), t(1), k(0){};\n\n    void next() {\n        ++k;\n        unsigned two_k_plus_one = 2 * k + 1;  // Pre-calculate\n        r = two_k_plus_one * (2 * q + r);\n        t = two_k_plus_one * t;\n        q *= k;\n    }\n\n    unsigned extract(unsigned x) const {\n        mpz_class tmp0 = q * x + r; // Use non-static temporary variables\n        mpz_class tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q *= 10;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n\n    LFT lft;\n    std::size_t n_digits = 0;\n\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        while (i < 10 && n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q > lft.r) continue;\n\n            unsigned digit = lft.extract(3);\n            if (digit == lft.extract(4)) {\n                std::cout << digit;\n                lft.produce(digit);\n                ++i;\n                ++n_digits;\n            }\n        }\n\n        for (; i < 10; ++i) {\n            std::cout << ' ';\n        }\n        std::cout << \"\\t:\" << n_digits << '\\n';\n    }\n}\n",
        197.379,
        1197.008
    ],
    "2": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n#include <vector>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\npublic:\n    LFT() : q(1), r(0), t(1), k(0){}\n\n    void next() {\n        ++k;\n        unsigned two_k_plus_1 = 2 * k + 1;\n        r = two_k_plus_1 * (2 * q + r);\n        t *= two_k_plus_1;\n        q *= k;\n    }\n\n    unsigned extract(unsigned x) const {\n        return mpz_class((q * x + r) / t).get_ui();\n    }\n\n    void produce(unsigned n) {\n        q *= 10;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int argc, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n\n    if (argc != 2) {\n        std::cerr << \"Usage: \" << argv[0] << \" <number_of_digits>\" << std::endl;\n        return 1;\n    }\n\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n\n    LFT lft;\n    std::size_t n_digits = 0;\n    std::vector<char> buffer;\n    buffer.reserve(10);\n\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n        buffer.clear();\n        while (i < 10 && n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q <= lft.r) {\n                unsigned digit = lft.extract(3);\n                if (digit == lft.extract(4)) {\n                    buffer.push_back('0' + digit);\n                    lft.produce(digit);\n                    ++i;\n                    ++n_digits;\n                }\n            }\n        }\n\n        // Append spaces if fewer than 10 digits in this line\n        buffer.resize(10, ' ');\n\n        // Output buffered digits\n        for (char c : buffer) {\n            std::cout << c;\n        }\n\n        std::cout << \"\\t:\" << n_digits << '\\n';\n    }\n}",
        215.39,
        1305.954
    ],
    "3": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\npublic:\n    LFT() : q(1), r(0), t(1), k(0){}\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t *= (2 * k + 1);\n        q *= k;\n    }\n\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1;\n        tmp0 = q * x + r;\n        tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q *= 10;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int argc, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n\n    if (argc != 2) {\n        std::cerr << \"Usage: \" << argv[0] << \" <number_of_digits>\" << std::endl;\n        return 1;\n    }\n\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n\n    LFT lft;\n    std::size_t n_digits = 0;\n    char buffer[10];\n\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n\n        while (i < 10 && n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q <= lft.r) {\n                unsigned digit = lft.extract(3);\n                if (digit == lft.extract(4)) {\n                    buffer[i] = '0' + digit;\n                    lft.produce(digit);\n                    ++i;\n                    ++n_digits;\n                }\n            }\n        }\n\n        while (i < 10) {\n            buffer[i++] = ' ';\n        }\n\n        std::cout.write(buffer, 10);\n        std::cout << \"\\t:\" << n_digits << '\\n';\n    }\n}",
        145.515,
        882.398
    ],
    "4": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\npublic:\n    LFT() : q(1), r(0), t(1), k(0){}\n\n    void next() {\n        ++k;\n        r = (2 * k + 1) * (2 * q + r);\n        t *= (2 * k + 1);\n        q *= k;\n    }\n\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1;\n        tmp0 = q * x + r;\n        tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q *= 10;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int argc, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n\n    if (argc != 2) {\n        std::cerr << \"Usage: \" << argv[0] << \" <number_of_digits>\" << std::endl;\n        return 1;\n    }\n\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n\n    LFT lft;\n    std::size_t n_digits = 0;\n    char buffer[10];\n\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n\n        while (i < 10 && n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q <= lft.r) {\n                unsigned digit = lft.extract(3);\n                if (digit == lft.extract(4)) {\n                    buffer[i] = '0' + digit;\n                    lft.produce(digit);\n                    ++i;\n                    ++n_digits;\n                }\n            }\n        }\n\n        std::cout.write(buffer, i);\n        std::cout.flush(); // Use flushing to ensure immediate output\n        std::cout << \"\\t:\" << n_digits << '\\n';\n    }\n}",
        189.993,
        1152.098
    ],
    "5": [
        "#include <gmpxx.h>\n#include <cstdlib>\n#include <iostream>\n\nclass LFT {\npublic:\n    mpz_class q;\n    mpz_class r;\n    mpz_class t;\n    unsigned k;\n\npublic:\n    LFT() : q(1), r(0), t(1), k(0){}\n\n    void next() {\n        ++k;\n        mpz_class k2 = 2 * k + 1;\n        r = k2 * (2 * q + r);\n        t *= k2;\n        q *= k;\n    }\n\n    unsigned extract(unsigned x) const {\n        static mpz_class tmp0, tmp1;\n        tmp0 = q * x + r;\n        tmp1 = tmp0 / t;\n        return tmp1.get_ui();\n    }\n\n    void produce(unsigned n) {\n        q *= 10;\n        r = 10 * (r - n * t);\n    }\n};\n\nint main(int argc, char** argv) {\n    std::ios_base::sync_with_stdio(false);\n\n    if (argc != 2) {\n        std::cerr << \"Usage: \" << argv[0] << \" <number_of_digits>\" << std::endl;\n        return 1;\n    }\n\n    const std::size_t TOTAL_DIGITS = std::atol(argv[1]);\n\n    LFT lft;\n    std::size_t n_digits = 0;\n    char buffer[10];\n\n    while (n_digits < TOTAL_DIGITS) {\n        std::size_t i = 0;\n\n        while (i < 10 && n_digits < TOTAL_DIGITS) {\n            lft.next();\n            if (lft.q <= lft.r) {\n                unsigned digit = lft.extract(3);\n                if (digit == lft.extract(4)) {\n                    buffer[i] = '0' + digit;\n                    lft.produce(digit);\n                    ++i;\n                    ++n_digits;\n                }\n            }\n        }\n\n        std::cout.write(buffer, i);\n        std::cout << \"\\t:\" << n_digits << '\\n';\n    }\n}\n",
        196.006,
        1188.55
    ]
}