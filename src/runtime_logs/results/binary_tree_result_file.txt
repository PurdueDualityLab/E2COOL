{
    "0": [
        "#include <iostream>\n#include <stdlib.h>\n#include <stdio.h>\n#include <apr_pools.h>\n\n\nconst size_t    LINE_SIZE = 64;\n\nclass Apr\n{\npublic:\n    Apr() \n    {\n        apr_initialize();\n    }\n\n    ~Apr() \n    {\n        apr_terminate();\n    }\n};\n\nstruct Node \n{\n    Node *l, *r;\n    \n    int check() const \n    {\n        if (l)\n            return l->check() + 1 + r->check();\n        else return 1;\n    }\n};\n\nclass NodePool\n{\npublic:\n    NodePool() \n    {\n        apr_pool_create_unmanaged(&pool);\n    }\n\n    ~NodePool() \n    {\n        apr_pool_destroy(pool);\n    }\n\n    Node* alloc()\n    {\n        return (Node *)apr_palloc(pool, sizeof(Node));\n    }\n\n    void clear()\n    {\n        apr_pool_clear(pool);\n    }\n\nprivate:\n    apr_pool_t* pool;\n};\n\nNode *make(int d, NodePool &store)\n{\n    Node* root = store.alloc();\n\n    if(d>0){\n        root->l=make(d-1, store);\n        root->r=make(d-1, store);\n    }else{\n        root->l=root->r=0;\n    }\n\n    return root;\n}\n\nint main(int argc, char *argv[]) \n{\n    Apr apr;\n    int min_depth = 4;\n    int max_depth = std::max(min_depth+2,\n                             (argc == 2 ? atoi(argv[1]) : 10));\n    int stretch_depth = max_depth+1;\n\n    // Alloc then dealloc stretchdepth tree\n    {\n        NodePool store;\n        Node *c = make(stretch_depth, store);\n        std::cout << \"stretch tree of depth \" << stretch_depth << \"\\t \"\n                  << \"check: \" << c->check() << std::endl;\n    }\n\n    NodePool long_lived_store;\n    Node *long_lived_tree = make(max_depth, long_lived_store);\n\n    // buffer to store output of each thread\n    char *outputstr = (char*)malloc(LINE_SIZE * (max_depth +1) * sizeof(char));\n\n    #pragma omp parallel for \n    for (int d = min_depth; d <= max_depth; d += 2) \n    {\n        int iterations = 1 << (max_depth - d + min_depth);\n        int c = 0;\n\n        // Create a memory pool for this thread to use.\n        NodePool store;\n\n        for (int i = 1; i <= iterations; ++i) \n        {\n            Node *a = make(d, store);\n            c += a->check();\n            store.clear();\n        }\n\n        // each thread write to separate location\n        sprintf(outputstr + LINE_SIZE * d, \"%d\\t trees of depth %d\\t check: %d\\n\",\n           iterations, d, c);\n    }\n\n    // print all results\n    for (int d = min_depth; d <= max_depth; d += 2) \n        printf(\"%s\", outputstr + (d * LINE_SIZE) );\n    free(outputstr);\n\n    std::cout << \"long lived tree of depth \" << max_depth << \"\\t \"\n              << \"check: \" << (long_lived_tree->check()) << \"\\n\";\n\n    return 0;\n}",
        85.687,
        771.847
    ],
    "1": [
        "#include <iostream>\n#include <stdlib.h>\n#include <stdio.h>\n#include <apr_pools.h>\n#include <vector>\n#include <omp.h>\n\nconst size_t LINE_SIZE = 64;\n\nclass Apr\n{\npublic:\n    Apr() \n    {\n        apr_initialize();\n    }\n\n    ~Apr() \n    {\n        apr_terminate();\n    }\n};\n\nstruct Node \n{\n    Node *l, *r;\n    \n    int check() const \n    {\n        if (l)\n            return l->check() + 1 + r->check();\n        else return 1;\n    }\n};\n\nclass NodePool\n{\npublic:\n    NodePool() \n    {\n        apr_pool_create_unmanaged(&pool);\n    }\n\n    ~NodePool() \n    {\n        apr_pool_destroy(pool);\n    }\n\n    Node* alloc()\n    {\n        return (Node *)apr_palloc(pool, sizeof(Node));\n    }\n\n    void clear()\n    {\n        apr_pool_clear(pool);\n    }\n\nprivate:\n    apr_pool_t* pool;\n};\n\nstruct MemoizationEntry {\n    Node *root;\n    bool calculated;\n};\n\nNode* make(int d, NodePool &store, std::vector<MemoizationEntry>& memo)\n{\n    if (memo[d].calculated) {\n        return memo[d].root; // Return precomputed subtree\n    }\n    \n    Node* root = store.alloc();\n\n    if(d > 0){\n        root->l = make(d-1, store, memo);\n        root->r = make(d-1, store, memo);\n    } else {\n        root->l = root->r = 0;\n    }\n\n    memo[d] = {root, true}; // Memoization entry\n\n    return root;\n}\n\nint main(int argc, char *argv[]) \n{\n    Apr apr;\n    int min_depth = 4;\n    int max_depth = std::max(min_depth+2,\n                             (argc == 2 ? atoi(argv[1]) : 10));\n    int stretch_depth = max_depth + 1;\n\n    // Alloc then dealloc stretchdepth tree\n    {\n        NodePool store;\n        std::vector<MemoizationEntry> memo(stretch_depth + 1, {nullptr, false});\n        Node *c = make(stretch_depth, store, memo);\n        std::cout << \"stretch tree of depth \" << stretch_depth << \"\\t \"\n                  << \"check: \" << c->check() << std::endl;\n    }\n\n    NodePool long_lived_store;\n    std::vector<MemoizationEntry> memo(max_depth + 1, {nullptr, false});\n    Node *long_lived_tree = make(max_depth, long_lived_store, memo);\n\n    // buffer to store output of each thread\n    std::vector<std::string> output(max_depth+2); // Vector for thread safety\n\n    #pragma omp parallel for \n    for (int d = min_depth; d <= max_depth; d += 2) \n    {\n        int iterations = 1 << (max_depth - d + min_depth);\n        int c = 0;\n\n        NodePool store;\n        std::vector<MemoizationEntry> localMemo(d + 1, {nullptr, false});\n\n        for (int i = 1; i <= iterations; ++i) \n        {\n            Node *a = make(d, store, localMemo);\n            c += a->check();\n            store.clear();\n        }\n\n        output[d] = std::to_string(iterations) + \"\\t trees of depth \" + std::to_string(d) + \"\\t check: \" + std::to_string(c) + \"\\n\";\n    }\n\n    // print all results\n    for (auto& out : output)\n        if (!out.empty()) printf(\"%s\", out.c_str());\n\n    std::cout << \"long lived tree of depth \" << max_depth << \"\\t \"\n              << \"check: \" << (long_lived_tree->check()) << \"\\n\";\n\n    return 0;\n}\n",
        18.012,
        172.79
    ],
    "2": [
        "#include <iostream>\n#include <stdlib.h>\n#include <stdio.h>\n#include <apr_pools.h>\n#include <vector>\n#include <omp.h>\n\nconst size_t LINE_SIZE = 64;\n\nclass Apr\n{\npublic:\n    Apr() \n    {\n        apr_initialize();\n    }\n\n    ~Apr() \n    {\n        apr_terminate();\n    }\n};\n\nstruct Node \n{\n    Node *l, *r;\n    \n    int check() const \n    {\n        if (l)\n            return l->check() + 1 + r->check();\n        else return 1;\n    }\n};\n\nclass NodePool\n{\npublic:\n    NodePool() \n    {\n        apr_pool_create_unmanaged(&pool);\n    }\n\n    ~NodePool() \n    {\n        apr_pool_destroy(pool);\n    }\n\n    Node* alloc()\n    {\n        return (Node *)apr_palloc(pool, sizeof(Node));\n    }\n\n    void clear()\n    {\n        apr_pool_clear(pool);\n    }\n\nprivate:\n    apr_pool_t* pool;\n};\n\nstruct MemoizationEntry {\n    Node *root;\n    bool calculated;\n};\n\nNode* make(int d, NodePool &store, std::vector<MemoizationEntry>& memo)\n{\n    if (memo[d].calculated) {\n        return memo[d].root; // Return precomputed subtree\n    }\n    \n    Node* root = store.alloc();\n\n    if(d > 0){\n        root->l = make(d-1, store, memo);\n        root->r = make(d-1, store, memo);\n    } else {\n        root->l = root->r = 0;\n    }\n\n    memo[d] = {root, true}; // Memoization entry\n\n    return root;\n}\n\nint main(int argc, char *argv[]) \n{\n    Apr apr;\n    int min_depth = 4;\n    int max_depth = std::max(min_depth+2,\n                             (argc == 2 ? atoi(argv[1]) : 10));\n    int stretch_depth = max_depth + 1;\n\n    // Alloc then dealloc stretchdepth tree\n    {\n        NodePool store;\n        std::vector<MemoizationEntry> memo(stretch_depth + 1, {nullptr, false});\n        Node *c = make(stretch_depth, store, memo);\n        std::cout << \"stretch tree of depth \" << stretch_depth << \"\\t \"\n                  << \"check: \" << c->check() << std::endl;\n    }\n\n    NodePool long_lived_store;\n    std::vector<MemoizationEntry> memo(max_depth + 1, {nullptr, false});\n    Node *long_lived_tree = make(max_depth, long_lived_store, memo);\n\n    // buffer to store output of each thread\n    std::vector<std::string> output(max_depth+2); // Vector for thread safety\n\n    #pragma omp parallel for \n    for (int d = min_depth; d <= max_depth; d += 2) \n    {\n        int iterations = 1 << (max_depth - d + min_depth);\n        int c = 0;\n\n        NodePool &store = long_lived_store;\n        std::vector<MemoizationEntry> &localMemo = memo;\n\n        for (int i = 1; i <= iterations; ++i) \n        {\n            Node *a = make(d, store, localMemo);\n            c += a->check();\n            store.clear();\n        }\n\n        output[d] = std::to_string(iterations) + \"\\t trees of depth \" + std::to_string(d) + \"\\t check: \" + std::to_string(c) + \"\\n\";\n    }\n\n    // print all results\n    for (auto& out : output)\n        if (!out.empty()) printf(\"%s\", out.c_str());\n\n    std::cout << \"long lived tree of depth \" << max_depth << \"\\t \"\n              << \"check: \" << (long_lived_tree->check()) << \"\\n\";\n\n    return 0;\n}",
        24.329,
        275.862
    ],
    "3": [
        "#include <iostream>\n#include <stdlib.h>\n#include <stdio.h>\n#include <apr_pools.h>\n#include <vector>\n#include <omp.h>\n\nconst size_t LINE_SIZE = 64;\n\nclass Apr\n{\npublic:\n    Apr() \n    {\n        apr_initialize();\n    }\n\n    ~Apr() \n    {\n        apr_terminate();\n    }\n};\n\nstruct Node \n{\n    Node *l, *r;\n    \n    int check() const \n    {\n        if (l)\n            return l->check() + 1 + r->check();\n        else return 1;\n    }\n};\n\nclass NodePool\n{\npublic:\n    NodePool() \n    {\n        apr_pool_create_unmanaged(&pool);\n    }\n\n    ~NodePool() \n    {\n        apr_pool_destroy(pool);\n    }\n\n    Node* alloc()\n    {\n        return (Node *)apr_palloc(pool, sizeof(Node));\n    }\n\n    void clear()\n    {\n        apr_pool_clear(pool);\n    }\n\nprivate:\n    apr_pool_t* pool;\n};\n\nstruct MemoizationEntry {\n    Node *root;\n    bool calculated;\n};\n\nNode* make(int d, NodePool &store, std::vector<MemoizationEntry>& memo)\n{\n    if (memo[d].calculated) {\n        return memo[d].root;\n    }\n    \n    Node* root = store.alloc();\n\n    if(d > 0){\n        root->l = make(d-1, store, memo);\n        root->r = make(d-1, store, memo);\n    } else {\n        root->l = root->r = 0;\n    }\n\n    memo[d] = {root, true}; \n\n    return root;\n}\n\nint main(int argc, char *argv[]) \n{\n    Apr apr;\n    int min_depth = 4;\n    int max_depth = std::max(min_depth+2,\n                             (argc == 2 ? atoi(argv[1]) : 10));\n    int stretch_depth = max_depth + 1;\n\n    {\n        NodePool store;\n        std::vector<MemoizationEntry> memo(stretch_depth + 1, {nullptr, false});\n        Node *c = make(stretch_depth, store, memo);\n        std::cout << \"stretch tree of depth \" << stretch_depth << \"\\t \"\n                  << \"check: \" << c->check() << std::endl;\n    }\n\n    NodePool long_lived_store;\n    std::vector<MemoizationEntry> memo(max_depth + 1, {nullptr, false});\n    Node *long_lived_tree = make(max_depth, long_lived_store, memo);\n\n    std::vector<std::string> output(max_depth+2);\n\n    #pragma omp parallel for \n    for (int d = min_depth; d <= max_depth; d += 2) \n    {\n        NodePool store; // Thread-specific pool\n        std::vector<MemoizationEntry> localMemo(d + 1, {nullptr, false});\n\n        int iterations = 1 << (max_depth - d + min_depth);\n        int c = 0;\n\n        for (int i = 1; i <= iterations; ++i) \n        {\n            Node *a = make(d, store, localMemo);\n            c += a->check();\n            store.clear();\n        }\n\n        output[d] = std::to_string(iterations) + \"\\t trees of depth \" + std::to_string(d) + \"\\t check: \" + std::to_string(c) + \"\\n\";\n    }\n\n    for (auto& out : output)\n        if (!out.empty()) printf(\"%s\", out.c_str());\n\n    std::cout << \"long lived tree of depth \" << max_depth << \"\\t \"\n              << \"check: \" << (long_lived_tree->check()) << \"\\n\";\n\n    return 0;\n}",
        18.193,
        181.48
    ],
    "4": [
        "#include <iostream>\n#include <stdlib.h>\n#include <stdio.h>\n#include <apr_pools.h>\n#include <vector>\n#include <unordered_map>\n#include <omp.h>\n\nconst size_t LINE_SIZE = 64;\n\nclass Apr\n{\npublic:\n    Apr() \n    {\n        apr_initialize();\n    }\n\n    ~Apr() \n    {\n        apr_terminate();\n    }\n};\n\nstruct Node \n{\n    Node *l, *r;\n    \n    int check() const \n    {\n        if (l)\n            return l->check() + 1 + r->check();\n        else return 1;\n    }\n};\n\nclass NodePool\n{\npublic:\n    NodePool() \n    {\n        apr_pool_create_unmanaged(&pool);\n    }\n\n    ~NodePool() \n    {\n        apr_pool_destroy(pool);\n    }\n\n    Node* alloc()\n    {\n        return (Node *)apr_palloc(pool, sizeof(Node));\n    }\n\n    void clear()\n    {\n        apr_pool_clear(pool);\n    }\n\nprivate:\n    apr_pool_t* pool;\n};\n\nstruct MemoizationEntry {\n    Node *root;\n    bool calculated;\n};\n\nNode* make(int d, NodePool &store, std::unordered_map<int, MemoizationEntry>& memo)\n{\n    if (memo.find(d) != memo.end() && memo[d].calculated) {\n        return memo[d].root; // Use precomputed subtree\n    }\n    \n    Node* root = store.alloc();\n\n    if(d > 0){\n        root->l = make(d-1, store, memo);\n        root->r = make(d-1, store, memo);\n    } else {\n        root->l = root->r = 0;\n    }\n\n    memo[d] = {root, true}; \n\n    return root;\n}\n\nint main(int argc, char *argv[]) \n{\n    Apr apr;\n    int min_depth = 4;\n    int max_depth = std::max(min_depth+2,\n                             (argc == 2 ? atoi(argv[1]) : 10));\n    int stretch_depth = max_depth + 1;\n\n    {\n        NodePool store;\n        std::unordered_map<int, MemoizationEntry> memo;\n        Node *c = make(stretch_depth, store, memo);\n        std::cout << \"stretch tree of depth \" << stretch_depth << \"\\t \"\n                  << \"check: \" << c->check() << std::endl;\n    }\n\n    NodePool long_lived_store;\n    std::unordered_map<int, MemoizationEntry> memo;\n    Node *long_lived_tree = make(max_depth, long_lived_store, memo);\n\n    std::vector<std::string> output(max_depth+2);\n\n    #pragma omp parallel for \n    for (int d = min_depth; d <= max_depth; d += 2) \n    {\n        NodePool store;\n        std::unordered_map<int, MemoizationEntry> localMemo;\n\n        int iterations = 1 << (max_depth - d + min_depth);\n        int c = 0;\n\n        for (int i = 1; i <= iterations; ++i) \n        {\n            Node *a = make(d, store, localMemo);\n            c += a->check();\n            store.clear();\n        }\n\n        output[d] = std::to_string(iterations) + \"\\t trees of depth \" + std::to_string(d) + \"\\t check: \" + std::to_string(c) + \"\\n\";\n    }\n\n    for (auto& out : output)\n        if (!out.empty()) printf(\"%s\", out.c_str());\n\n    std::cout << \"long lived tree of depth \" << max_depth << \"\\t \"\n              << \"check: \" << (long_lived_tree->check()) << \"\\n\";\n\n    return 0;\n}",
        32.556,
        448.242
    ],
    "5": [
        "#include <iostream>\n#include <stdlib.h>\n#include <stdio.h>\n#include <apr_pools.h>\n#include <vector>\n#include <string>\n#include <omp.h>\n\nconst size_t LINE_SIZE = 64;\n\nclass Apr {\npublic:\n    Apr() { apr_initialize(); }\n    ~Apr() { apr_terminate(); }\n};\n\nstruct Node {\n    Node *l, *r;\n\n    int check() const {\n        if (l) return l->check() + 1 + r->check();\n        else return 1;\n    }\n};\n\nclass NodePool {\npublic:\n    NodePool() { apr_pool_create_unmanaged(&pool); }\n    ~NodePool() { apr_pool_destroy(pool); }\n    Node* alloc() { return (Node *)apr_palloc(pool, sizeof(Node)); }\n    void clear() { apr_pool_clear(pool); }\nprivate:\n    apr_pool_t* pool;\n};\n\nstruct MemoizationEntry {\n    Node *root;\n    bool calculated;\n};\n\nNode* make(int d, NodePool &store, std::vector<MemoizationEntry> &memo) {\n    if (memo[d].calculated) return memo[d].root;\n    Node* root = store.alloc();\n\n    if (d > 0) {\n        root->l = make(d-1, store, memo);\n        root->r = make(d-1, store, memo);\n    } else {\n        root->l = root->r = 0;\n    }\n    memo[d] = {root, true};\n    return root;\n}\n\nint main(int argc, char *argv[]) {\n    Apr apr;\n    int min_depth = 4;\n    int max_depth = std::max(min_depth + 2, (argc == 2 ? atoi(argv[1]) : 10));\n    int stretch_depth = max_depth + 1;\n\n    {\n        NodePool store;\n        std::vector<MemoizationEntry> memo(stretch_depth + 1, {nullptr, false});\n        Node *c = make(stretch_depth, store, memo);\n        std::cout << \"stretch tree of depth \" << stretch_depth \n                  << \"\\tcheck: \" << c->check() << std::endl;\n    }\n\n    NodePool long_lived_store;\n    std::vector<MemoizationEntry> memo(max_depth + 1, {nullptr, false});\n    Node *long_lived_tree = make(max_depth, long_lived_store, memo);\n\n    std::vector<std::string> output(max_depth + 2);\n\n    #pragma omp parallel for\n    for (int d = min_depth; d <= max_depth; d += 2) {\n        NodePool store;\n        std::vector<MemoizationEntry> localMemo(d + 1, {nullptr, false});\n\n        int iterations = 1 << (max_depth - d + min_depth);\n        int c = 0;\n\n        for (int i = 1; i <= iterations; ++i) {\n            Node *a = make(d, store, localMemo);\n            c += a->check();\n            store.clear();\n        }\n\n        output[d] = std::to_string(iterations) + \"\\t trees of depth \" \n                    + std::to_string(d) + \"\\t check: \" + std::to_string(c) + \"\\n\";\n    }\n\n    for (const auto& out : output) {\n        if (!out.empty()) printf(\"%s\", out.c_str());\n    }\n\n    std::cout << \"long lived tree of depth \" << max_depth << \"\\t\"\n              << \"check: \" << long_lived_tree->check() << \"\\n\";\n\n    return 0;\n}",
        19.752,
        202.973
    ]
}